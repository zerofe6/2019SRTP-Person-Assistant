1).使用javaEE 版的eclipse开发动态的web工程（java web 项目）
2).servlet从本质上来说就是一个java类
3).servlet容器 创建和销毁servlet
4).servlet 类必须配置和映射在web.xml文件中 不然无法跑起来 这样才能通过浏览器去访问一个java类  一个servlet可以
被多个servlet mapping来映射
4).servlet容器创建servlet，并调用servlet的相关生命周期方法。
2).jsp,filter,listener,tag...等等都运行在servlet容器中


4 servlet生命周期相关方法：
1). init 方法：只被调用一次
2). 构造方法：只被调用一次，只有第一次请求servlet方法时，创建servlet实例，调用构造器 。这说明servlet是单实例的
3). service：被多次调用，每次请求都会调用service方法，用于相应请求
4). destroy：只被调用一次，在当前servlet所在的web应用被卸载调用之前，用于释放servlet所占用的资源

5.load-start-up参数
1).配置在servlet节点中
2).load-on-startup:可以指定servlet被创建的实际，若为负数，则在第一次请求时被创建，若为0或正数，则在当前web
应用被servlet容器加载时 创建实例，且数组越小越早被创建

6.关于servlet-mapping：

1).同一个servlet可以被映射到多个URL上，即多个<servlet - mapping>元素的<servlet-name>可以相同为同一个
<servlet>的名字 

2).<url - pattern >可以使用通配符来映射 但需注意 *和扩展名不能同时使用

7.ServletConfig封装了servlet的配置信息，并且可以获取ServletContext 对象
1).配置servlet的初始化参数
     <!-- 配置servlet的初始化参数 -->
     <init-param>
        <!-- 初始化参数名 -->
        <param-name>user</param-name>
        <!-- 初始化参数值 -->
        <param-value>root</param-value>
     </init-param>
     
     <init-param>
        <param-name>password</param-name>
        <param-value>1230</param-value>
     </init-param>
     注意：配置初始化参数必须在load-on-startup之前 

2).获取初始化参数：
    getInitParameter(String name):获取指定的初始化参数  
    getInitParameter():获取参数名组成的Enumeration 对象
	    	public void init(ServletConfig arg0) throws ServletException {
			// TODO 自动生成的方法存根
			System.out.println("srvlet init");
			System.out.println("test########################");
			//String user = arg0.getInitParameter("user");
			//System.out.println("user ="+ user);
			Enumeration<String> names = arg0.getInitParameterNames();
			while(names.hasMoreElements()) {
				String name =names.nextElement();
				String nameValue = arg0.getInitParameter(name);
				System.out.println("name:"+ name);
				System.out.println("nameVaule:"+ nameValue);
			}
			System.out.println("test########################");
		
			
		}
	
3).获取servlet的配置名称（了解）

8.getServletContext:ServletContext包含在ServletConfig中
1).可以由ServletCofing的获取
2).该对象代表当前web应用：可以从中或获取当前WEB应用的各种信息
  设置当前WEB应用的初始化参数
 <context-param>
    <param-name>driver</param-name>
    <param-value>com.mysql.jdbc.Driver</param-value>
  </context-param>
 
 获取当前WEB应用的初始化参数
  //获取servletContext对象
	    System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$");
	    ServletContext servletcontext = arg0.getServletContext();
	    Enumeration<String> servletContextParamNames = servletcontext.getInitParameterNames();
		while(servletContextParamNames.hasMoreElements()) {
			String servletContextParamName = servletContextParamNames.nextElement();
			String servletContextParamValue = servletcontext.getInitParameter(servletContextParamName);
			System.out.println("servletContextParamName = "+ servletContextParamName);
			System.out.println("servletContextParamVaule = "+ servletContextParamValue);
		}
		 System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$");    
  
 获取当前WEB应用的某一个文件在服务器上的绝对路径，而不是部署前的路径：
 getRealPath（String path）
    String realPath = servletcontext.getRealPath("note.txt");
    System.out.println(realPath);
		
获取点前WEB应用的名称
getContextPath
    String contextPath = servletcontext.getContextPath();
	System.out.println(contextPath);
		
获取当前web应用的某一个文件的输入流：
getResourceAsStream（String path）：path的/为相对于当前WEB应用的根目录
	ClassLoader classLoader = getClass().getClassLoader();
    InputStream is = classLoader.getResourceAsStream("/note.txt");
    System.out.println("1. "+ is);      
  
9.WEB应用的初始化参数和servlet的初始化参数区别
servlet的初始化参数想当与局部变量 只有该servlet才能获取  而WEB应用的初始化参数相当于全局变量 所有servlet都能获取

10.get请求和post请求
1).使用get请求方式给Web服务传递参数的格式：
①. http://localhost:8088/testOne/loginservlet?user=zero&password=1234
②. 使用get请求方式传送的数据一般在1KB以下
③. 在浏览器地址栏中输入某个URL地址或单击网页上的超链接时，浏览器发出的请求方式为get
④. 或网页中form标点元素的method属性被设置为了“GET”，浏览器提交这个Form表单时生成的HTTP请求方式也为GET
2).使用post方式传递参数：
①. post请求方式用于向Web服务器端提交form表单中的数据：form表单的method置位post
②. post方式将各个表单字段元及其数据作为HTTP消息的实体内容发送给服务器，传送的数据量要大的多
③. 请求参数在请求体中


11.如何在servlet中获取请求信息
1). servlet的service（）方法用于应答请求，因为每次请求都将调用servlet的service方法
2). public void service(ServletRequest arg0, ServletResponse arg1)
    servletRequest:封装了请求信息，可以从中获取到任何的请求信息
     servletResponse:封装了相应信息，如果想给用户什么信息，调用相应方法

           这两个方法由服务器提供，并在服务器调用service时传入

3).servletRequest
①. 获取请求参数
   》String getParameter(String name):根据请求参数的名字，返回参数值。
   若请求参数有多个值，该方法只能获取到第一个提交的值。
   
  》String[] getParameterValues(String name):根据请求参数的名字，返回请求参数对应的字符串数组
  
  》Enumeration getParameterNames():返回参数名对应的Enumeration对象
  类似于ServletConfig(或ServletContext)的getINitParameterNames()方法。
 
 》Map getParameterMap():返回请求参数的键值对：key:参数名， value:参数值， String数组类型
   
②. 获取请求的URL
	HttpServletRequest httpquset =(HttpServletRequest) arg0;
	String requestURI = httpquset.getRequestURI();
	System.out.println("获取到的URI为："+requestURI);
③. 获取请求的方式
	String method =httpquset.getMethod();
	System.out.println("获取到的请求方式为："+method);
④. 若为get请求可以获取请求	参数对应的字符串
    String querySting = httpquset.getQueryString();
	System.out.println("获取到的查询方式为："+querySting);
⑤. 获取请求的servlet的映射路径
   
3).HttpServletRequest:是ServletRequest的子接口，针对HTTP请求所定义，里面包含了大量
获取HTTP请求相关的方法

4).servletResponse:封装了响应信息，如果用户想给什么响应，具体可以使用该方法的接口实现
①. getWriter():返回一个PrintWriter对象，调用该对象的print（）方法，
         将把print中的参数直接打印到客户的浏览器上
②. 设置相应的内容类型
   response.setContentType("application/x-abiword");
③. void sendRedirect(String location)：请求的重定向（HttpServletResponse 中定义.）


   